// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin","debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id Int @id @default(autoincrement())
  email String
  password String
  admincommunity String
}

model User {
  id Int @id @default(autoincrement())
  kakaoId String @unique
  birthyear String
  birthday String
  gender String
  cellphone String @unique
  name String
  avatar String?
  bio String?
  region String?
  community Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  feeds Feed[]
  likes Like[]
  comments Comment[]
  age String
  poems Poem[]
  poemLikes Poemlike[]
  poemComments Poemcomment[]
}

model Feed {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  photos String[]
  caption String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes Like[]
  comments Comment[]
}

model Like {
  id Int @id @default(autoincrement())
  feed Feed @relation(fields: [feedId], references: [id], onDelete: Cascade)
  feedId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([feedId, userId])
}

model Comment {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  feed Feed @relation(fields: [feedId], references: [id], onDelete: Cascade)
  feedId Int
  payload String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Community {
  id Int @id @default(autoincrement())
  user User[] 
  communityName String @unique
  communityLogo String
}

model Poem {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  poemTitle String
  poemCaption String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  poemLikes Poemlike[]
  poemComments Poemcomment[]
}

model Poemlike {
  id Int @id @default(autoincrement())
  poem Poem @relation(fields: [poemId], references: [id], onDelete: Cascade)
  poemId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([poemId, userId])
}

model Poemcomment {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  poem Poem @relation(fields: [poemId], references: [id], onDelete: Cascade)
  poemId Int
  payload String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
